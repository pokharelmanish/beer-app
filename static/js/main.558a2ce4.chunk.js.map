{"version":3,"sources":["components/BeerList.js","components/Beer.js","components/BeerDetail.js","App.js","serviceWorker.js","index.js"],"names":["BeerList","beer","to","id","name","Beer","props","state","loading","beers","fetch","response","json","data","this","setState","console","log","map","key","React","Component","BeerDetail","url","match","params","description","contributed_by","App","Fragment","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAaeA,EAVE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAKE,KAAOF,EAAKG,SCkC9BC,E,kDArCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,MAAO,MAJQ,E,kMAUH,mC,SACWC,MADX,oC,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CAAEN,MAAOI,EAAML,SAAS,I,kDAEtCQ,QAAQC,IAAR,M,+IAKF,OACE,6BACGH,KAAKP,MAAMC,QACV,wCAEA,6BACE,6CACCM,KAAKP,MAAME,MAAMS,KAAI,SAACjB,GAAD,OACpB,kBAAC,EAAD,CAAUkB,IAAKlB,EAAKE,GAAIF,KAAMA,a,GA7BzBmB,IAAMC,W,OCqCVC,E,kDArCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXN,KAAM,MAHS,E,oMASTsB,E,2CAA0CT,KAAKR,MAAMkB,MAAMC,OAAOtB,I,SACjDO,MAAMa,G,cAAvBZ,E,gBACaA,EAASC,O,OAAtBC,E,OACNG,QAAQC,IAAIJ,GACZC,KAAKC,SAAS,CAAEd,KAAMY,I,kDAEtBG,QAAQC,IAAR,M,+IAKF,IAAMhB,EAAOa,KAAKP,MAAMN,MAAQa,KAAKP,MAAMN,KAAK,GAChD,OACE,6BACIa,KAAKP,MAAMN,KAGX,6BACE,4BAAKA,EAAKG,KAAV,gBACA,6CAAmBH,EAAKyB,aACxB,gDAAsBzB,EAAK0B,iBAL7B,6C,GAzBeP,IAAMC,WCchBO,EAXH,WACV,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,aAAaC,UAAWV,OCE9BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCbNa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.558a2ce4.chunk.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nconst BeerList = ({ beer }) => {\n  return (\n    <ul>\n      <li>\n        <Link to={`/beers/${beer.id}`}>{beer.name}</Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default BeerList\n","import React from \"react\"\nimport BeerList from \"./BeerList\"\n\nclass Beer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      beers: null,\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const url = \"https://api.punkapi.com/v2/beers\"\n      const response = await fetch(url)\n      const data = await response.json()\n      this.setState({ beers: data, loading: false })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.loading ? (\n          <div>Loading</div>\n        ) : (\n          <div>\n            <h1>List of Beers</h1>\n            {this.state.beers.map((beer) => (\n              <BeerList key={beer.id} beer={beer} />\n            ))}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Beer\n","import React from \"react\"\n\nclass BeerDetail extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      beer: null,\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const url = `https://api.punkapi.com/v2/beers/${this.props.match.params.id}`\n      const response = await fetch(url)\n      const data = await response.json()\n      console.log(data)\n      this.setState({ beer: data })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    const beer = this.state.beer && this.state.beer[0]\n    return (\n      <div>\n        {!this.state.beer ? (\n          <div>Loading</div>\n        ) : (\n          <div>\n            <h1>{beer.name} beer detail</h1>\n            <div>Description: {beer.description}</div>\n            <div>Contributed By: {beer.contributed_by}</div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default BeerDetail\n","import React from \"react\"\nimport Beer from \"./components/Beer\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport BeerDetail from \"./components/BeerDetail\"\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Router>\n        <Route exact path=\"/\" component={Beer} />\n        <Route exact path=\"/beers/:id\" component={BeerDetail} />\n      </Router>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}